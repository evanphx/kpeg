%% {
    require 'kpeg/grammar'

    def initialize(str, debug=false)
      setup_parser(str, debug)
      @g = KPeg::Grammar.new
    end

    attr_reader :g
    alias_method :grammar, :g
}


             eol = "\n"
         comment = "#" (!eol .)* eol
           space = " " | "\t" | eol
               - = (space | comment)*

                   # Allow - by itself, but not at the beginning
             var = < "-" | /[a-zA-Z][\-_a-zA-Z0-9]*/ > { text }

     dbl_escapes = "\\\"" { '"' }
                 | "\\n"  { "\n" }
                 | "\\t"  { "\t" }
                 | "\\\\" { "\\" }
         dbl_seq = < /[^\\"]+/ > { text }
   dbl_not_quote = (dbl_escapes:s | dbl_seq:s)+:ary { ary }
      dbl_string = "\"" dbl_not_quote:s "\"" { @g.str(s.join) }
sgl_escape_quote = "\\'" { "'" }
         sgl_seq = < /[^']/ > { text }
   sgl_not_quote = (sgl_escape_quote | sgl_seq)+:segs { segs.join }
      sgl_string = "'" sgl_not_quote:s "'" { @g.str(s) }
          string = dbl_string
                 | sgl_string

       not_slash = < ("\\/" | /[^\/]/)+ > { text }
     regexp_opts = < [a-z]* > { text }
          regexp = "/" not_slash:body "/" regexp_opts:opts
                   { @g.reg body, opts }

            char = < /[a-zA-Z0-9]/ > { text }
      char_range = "[" char:l "-" char:r "]" { @g.range(l,r) }

      range_elem = < /([1-9][0-9]*)|\*/ > { text }
      mult_range = "[" - range_elem:l - "," - range_elem:r - "]"
                   { [l == "*" ? nil : l.to_i, r == "*" ? nil : r.to_i] }

     curly_block = curly
           curly = "{" < (/[^{}]+/ | curly)* > "}" { @g.action(text) }
    nested_paren = "(" (/[^()]+/ | nested_paren)* ")"

           value = value:v ":" var:n { @g.t(v,n) }
                 | value:v "?" { @g.maybe(v) }
                 | value:v "+" { @g.many(v) }
                 | value:v "*" { @g.kleene(v) }
                 | value:v mult_range:r { @g.multiple(v, *r) }
                 | "&" value:v { @g.andp(v) }
                 | "!" value:v { @g.notp(v) }
                 | "(" - expression:o - ")" { o }
                 | "<" - expression:o - ">" { @g.collect(o) }
                 | curly_block
                 | "." { @g.dot }
                 | "@" var:name !(- "=") { @g.invoke(name) }
                 | var:name < nested_paren? > !(- "=")
                   { text.empty? ? @g.ref(name) : @g.invoke(name, text) }
                 | char_range
                 | regexp
                 | string

          spaces = (space | comment)+
          values = values:s spaces value:v { @g.seq(s, v) }
                 | value:l spaces value:r  { @g.seq(l, r) }
                 | value
     choose_cont = - "|" - values:v { v }
      expression = values:v choose_cont+:alts { @g.any(v, *alts) }
                 | values
            args = args:a "," - var:n - { a + [n] }
                 | - var:n - { [n] }
       statement = - var:v "(" args:a ")" - "=" - expression:o { @g.set(v, o, a) }
                 | - var:v - "=" - expression:o { @g.set(v, o) }
                 | - "%%" - curly:act { @g.add_setup act }
      statements = statement (- statements)?
             eof = !.
            root = statements - "\n"? eof

